# -*- coding: utf-8 -*-
"""Object Tracking System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B_P0nWMpXXs-1nIKwOegRvVxW8Hi-7kv
"""

#Installing dependencies

!pip install ultralytics opencv-python deep-sort-realtime

#Importing libraries

import cv2
from ultralytics import YOLO
from deep_sort_realtime.deepsort_tracker import DeepSort
from google.colab import files

#Loading YOLOv8 Model + Deep SORT Tracker

model = YOLO("yolov8n.pt")   # YOLOv8 small model (fast & lightweight)
tracker = DeepSort(max_age=30)

# Vehicle classes from COCO dataset
vehicle_classes = [2, 3, 5, 7]   # car, motorcycle, bus, truck

#Uploading a Video

print("ðŸ“‚ Upload a video file (MP4/AVI/MOV)...")
uploaded = files.upload()
video_path = list(uploaded.keys())[0]

#Processing The Video

cap = cv2.VideoCapture(video_path)
fourcc = cv2.VideoWriter_fourcc(*'mp4v')   # Save as MP4
out = cv2.VideoWriter('output.mp4', fourcc,
                      int(cap.get(cv2.CAP_PROP_FPS)),
                      (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
                       int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))))

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Run YOLOv8 detection with confidence threshold
    results = model(frame, stream=True, conf=0.4)

    detections = []
    for result in results:
        for box in result.boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            conf = float(box.conf[0])
            cls = int(box.cls[0])

            # Only keep vehicles
            if cls in vehicle_classes:
                detections.append(([x1, y1, x2-x1, y2-y1], conf, cls))

    # Update tracker
    tracks = tracker.update_tracks(detections, frame=frame)

    # Draw tracking results
    for track in tracks:
        if not track.is_confirmed():
            continue
        x1, y1, x2, y2 = track.to_ltrb()
        track_id = track.track_id
        cls = track.det_class if track.det_class is not None else -1
        label = model.names[cls] if cls in model.names else "vehicle"

        cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0,255,0), 2)
        cv2.putText(frame, f"{label} ID {track_id}",
                    (int(x1), int(y1)-10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255,255,255), 2)

    out.write(frame)

cap.release()
out.release()
print("âœ… Processing complete! Video saved as output.mp4")

#Downloading Output Video

files.download("output.mp4")

